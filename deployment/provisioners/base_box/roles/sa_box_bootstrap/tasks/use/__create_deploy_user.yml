--- # original credits https://github.com/StarterSquad/prudentia/blob/master/prudentia/tasks/add-sudo-user.yml

  - debug: msg="Creating deploy user {{ theuser }}:{{ thegroup }} with home directory {{ home }}"
    tags:
     - deployer

  - debug: msg="IMPORTANT! IF YOU PROVIDE PASS FOR DEPLOYMENT USER - PROVIDE IT HASHED,"
  - debug: msg="POSSIBLE FILTER -  | password_hash('sha512') "

  - name: Deploy User | Dependencies
    package: name="sudo" state="present"
    retries: 3
    register: result
    until: not result.failed
    become: yes
    tags:
     - deployer


  - name: Deploy User | Creating group
    group: name={{ thegroup }} state=present
    become: yes
    tags:
     - deployer

  - name: Deploy User | Creating user
    user:
      name: "{{ theuser }}"
      home: "{{ home }}"
      state: "present"
      shell: "/bin/bash"
      generate_ssh_key: "yes"
      group: "{{ thegroup }}"
      groups: "{{ deploy_user_group }}"
      password: "{{ thepassword | default(omit) }}"
    become: yes
    tags:
      - deployer

  - name: Deploy User | Check regular user key presence
    stat: path=/home/{{ ansible_user_id }}/.ssh/authorized_keys
    become: yes
    when: option_copy_initial_authorized_keys
    register: check_authorized_keys
    tags:
     - deployer

  - name: Deploy User | Copy authorized_keys from {{ ansible_user_id }}
    command: cp /home/{{ ansible_user_id }}/.ssh/authorized_keys {{ home }}/.ssh/authorized_keys
    become: yes
    when: option_copy_initial_authorized_keys and check_authorized_keys.stat.exists
    tags:
     - deployer

  - name: Deploy User | Copy authorized_keys from root
    command: cp /root/.ssh/authorized_keys {{ home }}/.ssh/authorized_keys
    become: yes
    when: option_copy_initial_authorized_keys and ansible_user_id == "root"
    tags:
     - deployer
  - name: Deploy User | Set permission on authorized_keys
    file: path={{ home }}/.ssh/authorized_keys mode=0600 owner={{ theuser }} group={{ thegroup }}
    become: yes
    when: option_copy_initial_authorized_keys and check_authorized_keys.stat.exists
    tags:
     - deployer

  - name: Deploy User | Ensuring sudoers no pwd prompting, if no sudo password set
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: "%{{ theuser }}"
      line: "%{{ theuser }} ALL=(ALL) NOPASSWD:ALL"
      validate: "visudo -cf %s"
    when: thepassword is not defined or thepassword.startswith("__omit_place_holder__")
    become: yes
    tags:
     - deployer

  - name: Deploy User | Ensuring sudoers with pwd prompting, if sudo password set
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: "%{{ theuser }}"
      line: "%{{ theuser }} ALL=(ALL) ALL"
      validate: "visudo -cf %s"
    when: thepassword is defined and not thepassword.startswith("__omit_place_holder__")
    become: yes
    tags:
     - deployer
